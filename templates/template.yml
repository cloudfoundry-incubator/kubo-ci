---
resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: bosh-errand
  type: docker-image
  source:
    repository: pcfkubo/bosh2-errand-resource
    tag: v0.1.3-dev

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-ci
    branch: master

- name: gcs-shipable-version
  type: gcs
  source:
    bucket: kubo-pipeline-store
    json_key: ((gcs-json-key))
    versioned_file: shipables/((pipeline-name))-shipable

- name: kubo-release
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    regexp: dev-builds/kubo-(\d+\.\d+\.\d+(-dev\.\d+)*).*\.tgz

- name: kubo-deployment
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    regexp: dev-builds/kubo-deployment-(.*).tgz

- name: kubo-lock
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    pool: ((locks))

- name: cfcr-deployment
  type: bosh-deployment
  source:
    skip_check: true

- name: slackers
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/cfcr-home.git
    private_key: ((git-ssh-key.private_key))
    paths:
    - 'slackers'

#- name: slack-alert
#  type: slack-notification
#  source:
#    url: ((build-alert-slack-url))

- name: gcs-kubeconfig
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: k8s/config

- name: run-apply-addons-errand
  type: bosh-errand
  source:
    skip_check: true

- name: run-smoke-tests-errand
  type: bosh-errand
  source:
    skip_check: true

jobs:

- name: claim-lock
  max_in_flight: 1
  plan:
  - get: kubo-deployment
    trigger: true
  - get: kubo-release
  - get: git-kubo-ci
  - task: check-version-match
    file: git-kubo-ci/tasks/check-version-match.yml
  - put: kubo-lock
    params: { acquire: true }

- name: deploy-k8s
  plan:
  - aggregate:
    - get: slackers
    - get: kubo-release
      passed: [ 'claim-lock' ]
    - get: git-kubo-ci
    - get: kubo-lock
      passed: [ 'claim-lock' ]
      version: every
      trigger: true
    - get: kubo-deployment
      passed: [ 'claim-lock' ]
  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: kubo-deployment
  - task: upload-stemcell
    file: git-kubo-ci/tasks/upload-stemcell.yml
    params:
      IAAS: ((iaas))
    input_mapping:
      source-json: kubo-lock
  - put: cfcr-deployment
    params:
      manifest: git-kubo-deployment/manifests/cfcr.yml
      cleanup: true
      no_redact: true
      ops_files:
      - git-kubo-ci/manifests/ops-files/kubo-latest-version.yml
      - git-kubo-deployment/manifests/ops-files/rename.yml
      - git-kubo-deployment/manifests/ops-files/add-hostname-to-master-certificate.yml
      - git-kubo-deployment/manifests/ops-files/allow-privileged-containers.yml
      - git-kubo-deployment/manifests/ops-files/addons-spec.yml
      - git-kubo-deployment/manifests/ops-files/enable-nfs.yml
      - git-kubo-deployment/manifests/ops-files/use-persistent-disk-for-workers.yml
      - git-kubo-ci/manifests/ops-files/add-hpa-properties.yml
      - git-kubo-ci/manifests/ops-files/increase-logging-level.yml
      var_files:
        addons-spec: "git-kubo-ci/specs/guestbook.yml"
      vars_files:
      - kubo-lock/metadata
      vars:
        disk_size: 10240
      releases:
      - kubo-release/*.tgz
      source_file: kubo-lock/metadata
    on_failure: &on_failure_alert
    #  do:
    #  - task: configure-slack-notification
    #    file: git-kubo-ci/tasks/configure-slack-notification-without-git-release.yml
    #  - put: slack-alert
    #    params:
    #      attachments_file: slack-notification/attachments
    #      text: |
    #        Build Failed. https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - task: update-kubeconfig
    file: git-kubo-ci/tasks/update-kubeconfig-long-lived-director.yml
  - put: gcs-kubeconfig
    params:
      file: kubeconfig/config
  - put: run-apply-addons-errand
    params:
      name: apply-addons
      keep_alive: true
      source_file: kubo-lock/metadata
    on_failure: *on_failure_alert
  - put: run-smoke-tests-errand
    params:
      name: smoke-tests
      keep_alive: true
      source_file: kubo-lock/metadata
    on_failure: *on_failure_alert

- name: run-tests
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock
      passed: [ 'deploy-k8s' ]
      version: every
      trigger: true
    - get: kubo-deployment
      passed: [ 'deploy-k8s' ]
    - get: kubo-release
      passed: [ 'deploy-k8s' ]
    - get: gcs-kubeconfig
      passed: [ "deploy-k8s" ]
  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: kubo-deployment
  - task: run-tests
    privileged: true
    on_failure: &on_failure_alert
#      do:
#      - task: configure-slack-notification
#        file: git-kubo-ci/tasks/configure-slack-notification-without-git-release.yml
#      - put: slack-alert
#        params:
#          attachments_file: slack-notification/attachments
#          text: |
#            Build Failed. https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME

- name: destroy-k8s
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      passed: [ 'run-tests' ]
      version: every
      trigger: true
    - get: kubo-deployment
      passed: [ 'run-tests' ]
    - get: kubo-release
      passed: [ 'run-tests' ]
  - task: destroy-k8s
    file: git-kubo-ci/tasks/destroy-k8s-instance-long-lived-director.yml
  - put: kubo-lock
    params:
      release: kubo-lock

- name: publish-version
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: gcs-shipable-version
    - get: kubo-deployment
      passed: [ 'run-tests' ]
      version: every
      trigger: true
    - get: kubo-release
      passed: [ 'run-tests' ]
      version: every
      trigger: true
  - task: unpack-kubo-deployment
    file: git-kubo-ci/tasks/unpack-kubo-deployment.yml
    input_mapping:
      gcs-kubo-deployment-pre: kubo-deployment
  - task: publish-version
    file: git-kubo-ci/tasks/publish-shipable-version.yml
  - put: gcs-shipable-version
    params:
      file: gcs-shipable-version-output/shipable
