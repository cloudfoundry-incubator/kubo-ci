#!/bin/bash

set -e -o pipefail

ci_dir="$(cd "$(dirname "$0")"; pwd)/templates"

print_usage() {
  echo "Usage:" >&2
  echo "    $0 <iaas> <deployment_configurations...> <testcase>  [--suffix=test-suffix]" >&2
  echo "" >&2
  echo "    valid iaas names:" >&2
  for name in "${ci_dir}"/iaas/*.yml; do
    local iaas_name
    iaas_name="$(basename "${name}")"
    echo "        - ${iaas_name%.yml}" >&2
  done
  echo "" >&2
  echo "    valid deployment_configuration names:" >&2
  for name in "${ci_dir}"/deployment-configurations/*.yml; do
    local deployment_configuration
    deployment_configuration="$(basename "${name}")"
    echo "        - ${deployment_configuration%.yml}" >&2
  done
  echo "" >&2
  echo "    valid testcases names:" >&2
  for name in "${ci_dir}"/testcases/*.yml; do
    local testcase_name
    testcase_name="$(basename "${name}")"
    echo "        - ${testcase_name%.yml}" >&2
  done
  echo "      --suffix,   fly the pipeline with a specified suffix"
}

extract_deployment_configuration() {
  local deployment_configuration="$1"

  local pipeline_filename="${ci_dir}/deployment-configurations/${deployment_configuration}.yml"
  if [ ! -f "${pipeline_filename}" ]; then
    pipeline_filename="${ci_dir}/deployment-configurations/${deployment_configuration}"
    if [ ! -f "${pipeline_filename}" ]; then
      echo "Unknown deployment configuration name: ${deployment_configuration}" >&2
      print_usage
      exit 1
    fi
  fi

  deployment_configuration=$(basename "${pipeline_filename}")
  echo -n "${deployment_configuration%.*}"
}

extract_testcase() {
  local testcase="$1"

  local pipeline_filename="${ci_dir}/testcases/${testcase}.yml"
  if [ ! -f "${pipeline_filename}" ]; then
    pipeline_filename="${ci_dir}/testcases/${testcase}"
    if [ ! -f "${pipeline_filename}" ]; then
      echo "Unknown testcase name: ${testcase}" >&2
      print_usage
      exit 1
    fi
  fi

  testcase=$(basename "${pipeline_filename}")
  echo -n "${testcase%.*}"
}

canonicalize_iaas_name() {
  local iaas=$1
  if [[ ${iaas} == *"vsphere"* ]]; then
    iaas="vsphere"
  fi

  echo -n "${iaas}"
}

main() {
  local deployment_configurations pipeline_config iaas_name testcase pipeline_suffix
  pipeline_suffix=""
  if [[ $# -lt 2 ]]; then
    print_usage
    exit 1
  fi

  # split incoming parameters to flags and regular parameters for later parsing
  flag_parameter_array=()
  local parameter_array=()
  for argument in "$@"; do
    if [[ "$argument" == --* ]]; then
      flag_parameter_array+=("$argument")
    else
      parameter_array+=("$argument")
    fi
  done

  # parse arguments
  if [[ ${#parameter_array[@]} -lt 2 ]]; then
    print_usage
    exit 1
  fi
  iaas_name=${parameter_array[0]}
  num_parameters=${#parameter_array[@]}
  last_index="$(($num_parameters-1))"
  testcase=$(extract_testcase "${parameter_array[$last_index]}")
  # first and last arguments should be fixed, so they are excluded from the loop
  for (( index=1; index<$last_index; index++ )); do
    deployment_configurations="${deployment_configurations} $(extract_deployment_configuration "${parameter_array[$index]}")"
  done

  # parse flags
  for flag in ${flag_parameter_array[@]}; do
    IFS='=' read -ra flag_parse <<< "$flag"
    key="${flag_parse[0]}"
    value="${flag_parse[1]}"
    case "$key" in
      --suffix)
        pipeline_suffix="_$value"
        ;;
      *)
        ;;
    esac
  done

  pipeline_config=$(cat "$ci_dir"/template.yml)
  local iaas_ops_file="${ci_dir}/iaas/${iaas_name}.yml"
  local testcase_ops_file="${ci_dir}/testcases/${testcase}.yml"
  local iaas_testcase_ops_file="${ci_dir}/iaas-testcase-ops-files/${iaas_name}-${testcase}.yml"

  for deployment_configuration in ${deployment_configurations}; do
    local deployment_configuration_ops_file="${ci_dir}/deployment-configurations/${deployment_configuration}.yml"
    local iaas_deployment_configuration_ops_file="${ci_dir}/iaas-deployment-configuration-ops-files/${iaas_name}-${deployment_configuration}.yml"
    if [ -f "${deployment_configuration_ops_file}" ]; then
      pipeline_config=$(bosh int <(echo "${pipeline_config}") --ops-file "${deployment_configuration_ops_file}")
    fi
    if [ -f "${iaas_deployment_configuration_ops_file}" ]; then
      pipeline_config=$(bosh int <(echo "${pipeline_config}") --ops-file "${iaas_deployment_configuration_ops_file}")
    fi
  done

  if [ -f "${iaas_ops_file}" ]; then
    pipeline_config=$(bosh int <(echo "${pipeline_config}") --ops-file "${iaas_ops_file}")
  fi
  if [ -f "${testcase_ops_file}" ]; then
    pipeline_config=$(bosh int <(echo "${pipeline_config}") --ops-file "${testcase_ops_file}" -v iaas="${iaas_name}")
  fi
  if [ -f "${iaas_testcase_ops_file}" ]; then
    pipeline_config=$(bosh int <(echo "${pipeline_config}") --ops-file "${iaas_testcase_ops_file}")
  fi

  fly --target kubo sync > /dev/null

  local joined_configurations="$(echo "${deployment_configurations}" | tr ' ' '_')"
  local pipeline_name="${iaas_name}${joined_configurations}_${testcase}${pipeline_suffix}"

  echo "Setting pipeline ${pipeline_name}"
  fly --target kubo set-pipeline \
    --config <(echo "${pipeline_config}") \
    --pipeline "$pipeline_name" \
    -v locks="${iaas_name}" \
    -v iaas="$(canonicalize_iaas_name "${iaas_name}")" \
    -v pipeline-name="$pipeline_name"
}

pushd "${ci_dir}" > /dev/null
  main "$@"
popd > /dev/null
