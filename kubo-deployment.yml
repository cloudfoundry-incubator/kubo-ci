<%
  iaas_list = %w(gcp vsphere vsphere-lb gcp-lb aws-lb openstack-lb aws openstack)
%>
---
groups:
- name: all
  jobs:
  - run-unit-tests
  - build-kubo-release
  - package-kubo-deployment-tarball
<% iaas_list.each do |iaas| %>
  - claim-lock-<%= iaas %>
  - install-bosh-<%= iaas %>
  - deploy-k8s-<%= iaas %>
  - run-k8s-integration-tests-<%= iaas %>
  - destroy-k8s-<%= iaas %>
  - destroy-bosh-<%= iaas %>
<% end %>
  - upload-kubo-deployment
  - upload-kubo-release
  - success-notification
<% iaas_list.each do |iaas| %>
- name: <%= iaas %>
  jobs:
  - claim-lock-<%= iaas %>
  - install-bosh-<%= iaas %>
  - deploy-k8s-<%= iaas %>
  - run-k8s-integration-tests-<%= iaas %>
  - destroy-k8s-<%= iaas %>
  - destroy-bosh-<%= iaas %>
<% end %>
resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: https://github.com/pivotal-cf-experimental/kubo-ci
    branch: master

- name: git-kubo-deployment
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-deployment
    branch: master
    ignore_paths:
    - '*.md'
    - 'LICENSE'
    - 'NOTICE'

- name: git-kubo-release
  type: git
  source:
    uri: https://github.com/cloudfoundry-incubator/kubo-release
    branch: master
    ignore_paths:
    - '*.md'
    - 'LICENSE'
    - 'NOTICE'

<% iaas_list.each do |iaas| %>
- name: kubo-lock-<%= iaas %>
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key))
    pool: kubo-<%= iaas %>
<% end %>

- name: kubo-lock-openstack-global
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key))
    pool: kubo-openstack-global

- name: kubo-lock-openstack-lb-global
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key))
    pool: kubo-openstack-lb-global

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/state.json

- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: bosh/creds.yml

- name: gcs-kubo-release-tarball-untested
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    regexp: kubo-release-(.*).tgz

- name: gcs-kubo-deployment-tarball-untested
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    regexp: kubo-deployment-(.*).tgz

- name: gcs-kubo-releases
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-releases
    regexp: kubo-release-(.*).tgz

- name: gcs-kubo-deployments
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-releases
    regexp: kubo-deployment-(.*).tgz

- name: gcs-kubo-release-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-public
    versioned_file: kubo-release-latest.tgz

- name: gcs-kubo-deployment-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-public
    versioned_file: kubo-deployment-latest.tgz

- name: kubo-version
  type: semver
  source:
    key: kubo-version
    access_key_id: ((gcs-access-key-id))
    secret_access_key: ((gcs-secret-access-key))
    bucket: kubo-pipeline-store
    region_name: us-east1
    endpoint: storage.googleapis.com
# stemcell
- name: ubuntu-trusty-stemcell
  type: bosh-io-stemcell
  source:
    name: bosh-warden-boshlite-ubuntu-trusty-go_agent

jobs:
- name: run-unit-tests
  plan:
  - get: git-kubo-ci
  - get: git-kubo-deployment
    trigger: true
  - get: git-kubo-release
    trigger: true
  - task: run-release-unit-tests
    file: git-kubo-ci/tasks/run-release-unit-tests.yml
  - task: run-deployment-unit-tests
    file: git-kubo-ci/tasks/run-deployment-unit-tests.yml

- name: build-kubo-release
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'run-unit-tests' ]
      trigger: true
    - get: kubo-version
      params:
        pre: dev
    - get: git-kubo-release
      passed: [ 'run-unit-tests' ]
      trigger: true
    - get: ubuntu-trusty-stemcell
      version:
        version: "3468.5"
  - task: build-kubo-release
    file: git-kubo-ci/tasks/build-kubo-release.yml
  - task: export-release
    file: git-kubo-ci/tasks/export-release.yml
    privileged: true
    input_mapping:
      kubo-ci: git-kubo-ci
      stemcell: ubuntu-trusty-stemcell
      release: kubo-release
  - put: gcs-kubo-release-tarball-untested
    params:
      file: compiled-release/kubo-*.tgz
  - put: kubo-version
    params:
      pre: dev

- name: package-kubo-deployment-tarball
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'build-kubo-release' ]
    - get: kubo-version
      passed: [ 'build-kubo-release' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'build-kubo-release' ]
      trigger: true
    - get: git-kubo-release
      passed: [ 'build-kubo-release' ]
  - task: build-kubo-deployment-tarball
    file: git-kubo-ci/tasks/build-kubo-deployment-tarball.yml
  - put: gcs-kubo-deployment-tarball-untested
    params:
      file: kubo-deployment-tarball/kubo-deployment*.tgz

<% iaas_list.each do |iaas| %>
- name: claim-lock-<%= iaas %>
  max_in_flight: 1
  plan:
  <% if iaas.include? "openstack" %>
  - put: kubo-lock-<%= iaas %>-global
    params: { acquire: true }
  <% end %>
  - aggregate:
    - get: kubo-version
      passed: [ 'package-kubo-deployment-tarball' ]
      trigger: true
    - get: git-kubo-release
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: git-kubo-deployment
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'package-kubo-deployment-tarball' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'package-kubo-deployment-tarball' ]
  - put: kubo-lock-<%= iaas %>
    params: { acquire: true }

- name: install-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'claim-lock-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'claim-lock-<%= iaas %>' ]
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-<%= iaas %>-global
      passed: [ 'claim-lock-<%= iaas %>' ]
    <% end %>
  - task: install
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
  - aggregate:
    - put: gcs-bosh-creds
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      params:
        file: bosh-state/state.json

- name: deploy-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'install-bosh-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'install-bosh-<%= iaas %>' ]
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-<%= iaas %>-global
      passed: [ 'install-bosh-<%= iaas %>' ]
    <% end %>
  - task: deploy
    tags: [<%= iaas %>]
    input_mapping:
      gcs-kubo-release-tarball: gcs-kubo-release-tarball-untested
      kubo-lock: kubo-lock-<%= iaas %>
    file: git-kubo-ci/tasks/deploy-k8s-instance.yml
    params:
      ADDITIONAL_MANIFEST_OPS_FILE: compiled-versions.yml
    <% if iaas.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
    <% end %>

- name: run-k8s-integration-tests-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    <% if iaas.include? "openstack" %>
    - get: kubo-lock-<%= iaas %>-global
      passed: [ 'deploy-k8s-<%= iaas %>' ]
    <% end %>
  - task: integration-tests
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/run-k8s-integration-tests-ci.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
    params:
      KUBERNETES_AUTHENTICATION_POLICY: RBAC
  - task: pod-to-pod
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/pod-to-pod.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
  <% if iaas.include? "openstack" %>
  on_success:
    do:
    - put: kubo-lock-<%= iaas %>-global
      params: { release: kubo-lock-<%= iaas %>-global }
  on_failure:
    do:
    - put: kubo-lock-<%= iaas %>-global
      params: { release: kubo-lock-<%= iaas %>-global }
  <% end %>

- name: destroy-k8s-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: git-kubo-deployment
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'run-k8s-integration-tests-<%= iaas %>' ]
  - task: destroy-k8s
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}


- name: destroy-bosh-<%= iaas %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: kubo-lock-<%= iaas %>
      version: every
      trigger: true
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: kubo-version
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'destroy-k8s-<%= iaas %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'destroy-k8s-<%= iaas %>' ]
  - task: destroy
    tags: [<%= iaas %>]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= iaas %>}
  - put: kubo-lock-<%= iaas %>
    params: { release: kubo-lock-<%= iaas %> }
<% end %>

<%
 destroy_bosh = iaas_list.map {|iaas| "destroy-bosh-#{iaas}"}
%>

- name: upload-kubo-deployment
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: <%= destroy_bosh %>
    - get: kubo-version
      passed: <%= destroy_bosh %>
      trigger: true
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= destroy_bosh %>
  - aggregate:
    - put: gcs-kubo-deployment-tarball
      params:
        file: gcs-kubo-deployment-tarball-untested/kubo-deployment-*.tgz
    - put: gcs-kubo-deployments
      params:
        file: gcs-kubo-deployment-tarball-untested/kubo-deployment-*.tgz


- name: upload-kubo-release
  plan:
  - aggregate:
    - get: gcs-kubo-release-tarball-untested
      passed: <%= destroy_bosh %>
    - get: kubo-version
      passed: <%= destroy_bosh %>
      trigger: true
  - aggregate:
    - put: gcs-kubo-release-tarball
      params:
        file: gcs-kubo-release-tarball-untested/kubo-*.tgz
    - put: gcs-kubo-releases
      params:
        file: gcs-kubo-release-tarball-untested/kubo-*.tgz

- name: success-notification
  plan:
  - aggregate:
    - get: kubo-version
      passed: [ upload-kubo-release, upload-kubo-deployment ]
      trigger: true
