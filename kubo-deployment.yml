<%
  envs = %w(vsphere-lb vsphere-proxy)
  additional_envs = %w()
  env_list = envs + additional_envs
  enable_failure_alert = true

  upgrade_test_envs = %w(vsphere-proxy)
  multi_az_envs = %w(vsphere-lb)
  multi_master_upgrade_test_envs = %w(vsphere-lb)
  conformance_test_envs = envs - %w(vsphere-proxy)
  proxy_envs = %w(vsphere-proxy)
  bbr_test_envs = %w(vsphere-lb)
%>
---
groups:
- name: all
  jobs:
<% conformance_test_envs.each do |env| %>
  - run-k8s-conformance-tests-<%= env %>
<% end %>
<% env_list.each do |env| %>
  - claim-lock-<%= env %>
  - install-bosh-<%= env %>
  - deploy-k8s-<%= env %>
  - run-k8s-integration-tests-<%= env %>
  - run-k8s-turbulence-tests-<%= env %>
  - destroy-k8s-<%= env %>
  - destroy-bosh-<%= env %>
<% end %>
<% bbr_test_envs.each do |env| %>
  - claim-lock-bbr-<%= env %>
  - install-bosh-bbr-<%= env %>
  - deploy-k8s-bbr-<%= env %>
  - run-k8s-bbr-tests-<%= env %>
  - destroy-k8s-bbr-<%= env %>
  - destroy-bosh-bbr-<%= env %>
<% end %>
<% upgrade_test_envs.each do |env| %>
  - claim-lock-upgrade-<%= env %>
  - install-bosh-for-upgrade-<%= env %>
  - deploy-old-k8s-<%= env %>
  - upgrade-kubo-<%= env %>
  - destroy-k8s-upgrade-<%= env %>
  - destroy-bosh-upgrade-<%= env %>
<% end %>
<% multi_master_upgrade_test_envs.each do |env| %>
  - claim-lock-upgrade-multi-master-<%= env %>
  - install-bosh-multi-master-<%= env %>
  - deploy-old-k8s-multi-master-<%= env %>
  - upgrade-kubo-multi-master-<%= env %>
  - destroy-k8s-upgrade-multi-master-<%= env %>
  - destroy-bosh-upgrade-multi-master-<%= env %>
<% end %>
  - upload-kubo-deployment
  - upload-kubo-release
<% env_list.each do |env| %>
- name: <%= env %>
  jobs:
  - claim-lock-<%= env %>
  - install-bosh-<%= env %>
  - deploy-k8s-<%= env %>
  - run-k8s-integration-tests-<%= env %>
  <% if bbr_test_envs.include? env %>
  - claim-lock-bbr-<%= env %>
  - install-bosh-bbr-<%= env %>
  - deploy-k8s-bbr-<%= env %>
  - run-k8s-bbr-tests-<%= env %>
  - destroy-k8s-bbr-<%= env %>
  - destroy-bosh-bbr-<%= env %>
  <% end %>
  <% if conformance_test_envs.include? env %>
  - run-k8s-conformance-tests-<%= env %>
  <% end %>
  - run-k8s-turbulence-tests-<%= env %>
  - destroy-k8s-<%= env %>
  - destroy-bosh-<%= env %>
  <% if upgrade_test_envs.include? env %>
  - claim-lock-upgrade-<%= env %>
  - install-bosh-for-upgrade-<%= env %>
  - deploy-old-k8s-<%= env %>
  - upgrade-kubo-<%= env %>
  - destroy-k8s-upgrade-<%= env %>
  - destroy-bosh-upgrade-<%= env %>
  <% end %>
  <% if multi_master_upgrade_test_envs.include? env %>
  - claim-lock-upgrade-multi-master-<%= env %>
  - install-bosh-multi-master-<%= env %>
  - deploy-old-k8s-multi-master-<%= env %>
  - upgrade-kubo-multi-master-<%= env %>
  - destroy-k8s-upgrade-multi-master-<%= env %>
  - destroy-bosh-upgrade-multi-master-<%= env %>
  <% end %>
<% end %>
- name: integration
  jobs:
  <% env_list.each do |env| %>
  - run-k8s-integration-tests-<%= env %>
  <% end %>
- name: conformance
  jobs:
  <% conformance_test_envs.each do |env| %>
  - run-k8s-conformance-tests-<%= env %>
  <% end %>
- name: turbulence
  jobs:
  <% env_list.each do |env| %>
  - run-k8s-turbulence-tests-<%= env %>
  <% end %>
- name: upgrade
  jobs:
  <% upgrade_test_envs.each do |env| %>
  - claim-lock-upgrade-<%= env %>
  - install-bosh-for-upgrade-<%= env %>
  - deploy-old-k8s-<%= env %>
  - upgrade-kubo-<%= env %>
  - destroy-k8s-upgrade-<%= env %>
  - destroy-bosh-upgrade-<%= env %>
  <% end %>
  <% multi_master_upgrade_test_envs.each do |env| %>
  - claim-lock-upgrade-multi-master-<%= env %>
  - install-bosh-multi-master-<%= env %>
  - deploy-old-k8s-multi-master-<%= env %>
  - upgrade-kubo-multi-master-<%= env %>
  - destroy-k8s-upgrade-multi-master-<%= env %>
  - destroy-bosh-upgrade-multi-master-<%= env %>
  <% end %>
- name: bbr
  jobs:
  <% bbr_test_envs.each do |env| %>
    - claim-lock-bbr-<%= env %>
    - install-bosh-bbr-<%= env %>
    - deploy-k8s-bbr-<%= env %>
    - run-k8s-bbr-tests-<%= env %>
    - destroy-k8s-bbr-<%= env %>
    - destroy-bosh-bbr-<%= env %>
  <% end %>

resource_types:
- name: gcs
  type: docker-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notification
  type: docker-image
  source:
    repository: cfcommunity/slack-notification-resource
    tag: latest

- name: bosh-deployment
  type: docker-image
  source:
    repository: cloudfoundry/bosh-deployment-resource

- name: bosh-errand
  type: docker-image
  source:
    repository: pcfkubo/bosh2-errand-resource
    tag: v0.1.3-dev

resources:
- name: git-kubo-ci
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/kubo-ci
    branch: decouple_cfcr
    private_key: ((git-ssh-key.private_key))

- name: git-kubo-deployment
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/kubo-deployment.git
    branch: decouple_cfcr
    private_key: ((git-ssh-key.private_key))
    ignore_paths:
    - 'LICENSE'
    - 'NOTICE'

- name: git-kubo-release
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/kubo-release.git
    branch: decouple_cfcr
    private_key: ((git-ssh-key.private_key))
    ignore_paths:
    - '*.md'
    - 'LICENSE'
    - 'NOTICE'

- name: git-kubernetes-release
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/kubernetes-release.git
    branch: v1.14.x
    private_key: ((git-ssh-key.private_key))
    ignore_paths:
    - '*.md'
    - 'LICENSE'
    - 'NOTICE'

- name: git-kubo-drats
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/kubo-disaster-recovery-acceptance-tests.git
    branch: master
    private_key: ((git-ssh-key.private_key))

- name: github-etcd-release
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: cfcr-etcd-release
    access_token: ((github-kubo-gitbot-access-token))
    tag_filter: "v(.*)"

- name: git-bosh-deployment
  type: git
  source:
    uri: git@github.com:cloudfoundry/bosh-deployment.git
    branch: master
    private_key: ((git-ssh-key.private_key))

- name: slackers
  type: git
  source:
    uri: git@github.com:cloudfoundry-incubator/cfcr-home.git
    private_key: ((git-ssh-key.private_key))
    paths:
    - 'slackers'

- name: slack-alert
  type: slack-notification
  source:
    url: ((build-alert-slack-url))

- name: source-json
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: source.json

- name: gcs-load-balancer-vars
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store
    versioned_file: load-balancer-vars.yml

- name: tinyproxy-deployment
  type: bosh-deployment
  source:
    deployment: tinyproxy
    skip_check: true

- name: cfcr-deployment
  type: bosh-deployment
  source:
    deployment: ci-service
    skip_check: true

- name: run-apply-addons-errand
  type: bosh-errand
  source:
    deployment: ci-service
    skip_check: true

- name: run-smoke-tests-errand
  type: bosh-errand
  source:
    deployment: ci-service
    skip_check: true

<% env_list.each do |env| %>
- name: kubo-lock-<%= env %>
  type: pool
  source:
    uri: git@github.com:pivotal-cf-experimental/kubo-locks.git
    branch: master
    private_key: ((git-ssh-key.private_key))
    pool: kubo-<%= env %>
<% end %>

- name: gcs-bosh-state
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    versioned_file: bosh/state.json

- name: gcs-bosh-creds
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    versioned_file: bosh/creds.yml

- name: gcs-kubeconfig
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    versioned_file: k8s/config

- name: gcs-kubernetes-release-tarball-untested
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    regexp: dev-builds/kubernetes-release-(.*).tgz

- name: gcs-kubo-release-tarball-untested
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    regexp: dev-builds/kubo-release-(.*).tgz

- name: gcs-kubo-deployment-tarball-untested
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    regexp: dev-builds/kubo-deployment-(.*).tgz

- name: gcs-kubo-releases
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    regexp: kubo-release-(.*).tgz

- name: gcs-kubo-deployments
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    regexp: kubo-deployment-(.*).tgz

- name: gcs-kubo-release-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    versioned_file: kubo-release-latest.tgz

- name: gcs-kubo-deployment-tarball
  type: gcs
  source:
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    versioned_file: kubo-deployment-latest.tgz

- name: old-kubo-release-tarball
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-release
    pre_release: true
    access_token: ((github-kubo-gitbot-access-token))

- name: old-kubo-deployment-tarball
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: kubo-deployment
    pre_release: true
    access_token: ((github-kubo-gitbot-access-token))

- name: kubo-version
  type: semver
  source:
    driver: gcs
    key: versions/kubo-version
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    version: v0.33.100

- name: kubernetes-version
  type: semver
  source:
    driver: gcs
    key: versions/kubernetes-version
    json_key: ((gcs-json-key))
    bucket: kubo-pipeline-store-test
    version: v1.14.1

- name: bbr-cli
  type: github-release
  source:
    owner: cloudfoundry-incubator
    repository: bosh-backup-and-restore
    access_token: ((github-kubo-gitbot-access-token))

jobs:
<% env_list.each do |env| %>
- name: claim-lock-<%= env %>
  max_in_flight: 1
  plan:
  - aggregate:
    - get: kubo-version
      trigger: true
    - get: git-kubo-release
    - get: git-kubo-deployment
    - get: gcs-kubo-release-tarball-untested
    - get: gcs-kubo-deployment-tarball-untested
    - get: gcs-kubernetes-release-tarball-untested
  - put: kubo-lock-<%= env %>
    params: { acquire: true }

- name: install-bosh-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-bosh-deployment
    - get: git-kubo-deployment
      passed: [ 'claim-lock-<%= env %>' ]
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'claim-lock-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'claim-lock-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-<%= env %>' ]
    - get: kubo-version
      passed: [ 'claim-lock-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'claim-lock-<%= env %>' ]
    - get: gcs-kubernetes-release-tarball-untested
      passed: [ 'claim-lock-<%= env %>' ]
  - task: install
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    params:
      USE_TURBULENCE: 1
      <% if env =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= env %>-k8s-cloud-config-multiaz.yml
      <% elsif env.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>
    on_failure: &on_failure_alert
      do:
      - task: configure-slack-notification
        file: git-kubo-ci/tasks/configure-slack-notification.yml
      - put: slack-alert
        params:
          attachments_file: slack-notification/attachments
          text: |
            Build Failed. https://ci.kubo.sh/teams/$BUILD_TEAM_NAME/pipelines/$BUILD_PIPELINE_NAME/jobs/$BUILD_JOB_NAME/builds/$BUILD_NAME
  - aggregate:
    - put: gcs-bosh-creds
      attempts: 10
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      attempts: 10
      params:
        file: bosh-state/state.json
  - task: configure-bosh-for-turbulence
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/configure-bosh.yml
  - task: generate-load-balancer-vars
    file: git-kubo-ci/tasks/generate-load-balancer-vars.yml
  - task: generate-source-json
    file: git-kubo-ci/tasks/generate-source-json.yml
  - aggregate:
    - put: gcs-load-balancer-vars
      attempts: 10
      params:
        file: load-balancer-vars/vars.yml
    - put: source-json
      attempts: 10
      params:
        file: source-json/source.json
  - task: update-cloud-config-with-vm-ext
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/update-cloud-config-with-vm-ext.yml

- name: deploy-k8s-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'install-bosh-<%= env %>' ]
    - get: git-kubo-deployment
      # passed: [ 'install-bosh-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'install-bosh-<%= env %>' ]
    - get: kubo-version
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'install-bosh-<%= env %>' ]
    - get: source-json
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-load-balancer-vars
      passed: [ 'install-bosh-<%= env %>' ]
    - get: gcs-kubernetes-release-tarball-untested
      passed: [ 'install-bosh-<%= env %>' ]
  <% if env =~ /^vsphere/ %>
  - task: get_director_uuid
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/get_director_uuid.yml
  <% end %>
  <% if env =~ /^vsphere-proxy/ %>
  - task: update-cloud-config-with-master-static-ips
    file: git-kubo-ci/tasks/update-cloud-config.yml
    tags: ['<%= env %>']
    params:
      OPS: -o git-kubo-ci/manifests/ops-files/add-master-static-ips-cloud-config.yml --vars-file=kubo-lock/metadata
  - task: update-cloud-config-for-proxy
    file: git-kubo-ci/tasks/update-cloud-config.yml
    tags: ['<%= env %>']
    params:
      OPS: -o git-kubo-ci/manifests/ops-files/vsphere-proxy-cloud-config.yml --vars-file=kubo-lock/metadata
  <% end %>
  - task: upload-stemcell
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/upload-stemcell.yml
    params:
      IAAS: <%= env.split('-')[0] %>
  - put: cfcr-deployment
    params:
      manifest: git-kubo-deployment/manifests/cfcr.yml
      cleanup: true
      no_redact: true
      ops_files:
      - git-kubo-ci/manifests/ops-files/kubo-latest-version.yml
      - git-kubo-ci/manifests/ops-files/kubernetes-latest-version.yml
      - git-kubo-deployment/manifests/ops-files/misc/bootstrap.yml
      - git-kubo-deployment/manifests/ops-files/allow-privileged-containers.yml
      - git-kubo-deployment/manifests/ops-files/addons-spec.yml
      - git-kubo-deployment/manifests/ops-files/enable-bbr.yml
      - git-kubo-deployment/manifests/ops-files/enable-nfs.yml
      - git-kubo-ci/manifests/ops-files/add-hpa-properties.yml
      - git-kubo-ci/manifests/ops-files/increase-logging-level.yml
      <% if env =~ /^gcp/ %>
      - git-kubo-deployment/manifests/ops-files/iaas/gcp/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/use-vm-extensions.yml
      - git-kubo-deployment/manifests/ops-files/iaas/gcp/add-subnetwork-for-internal-load-balancer.yml
      <% end %>
      <% if env =~ /^aws/ %>
      - git-kubo-deployment/manifests/ops-files/iaas/aws/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/use-vm-extensions.yml
      - git-kubo-deployment/manifests/ops-files/iaas/aws/lb.yml
      <% end %>
      <% if env =~ /^openstack/ %>
      - git-kubo-deployment/manifests/ops-files/iaas/openstack/cloud-provider.yml
      - git-kubo-ci/manifests/ops-files/add-master-static-ips.yml
      <% end %>
      <% if env =~ /^vsphere/ %>
      - git-kubo-deployment/manifests/ops-files/iaas/vsphere/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/iaas/vsphere/use-vm-extensions.yml
      <% end %>
      <% if !(env =~ /^(gcp|vsphere-lb|aws-lb)/) %>
      - git-kubo-deployment/manifests/ops-files/misc/single-master.yml
      - git-kubo-ci/manifests/ops-files/scale-to-one-az.yml
      <% end %>
      <% if env =~ /^vsphere-proxy/ %>
      - git-kubo-deployment/manifests/ops-files/add-proxy.yml
      - git-kubo-deployment/manifests/ops-files/use-persistent-disk-for-workers.yml
      - git-kubo-ci/manifests/ops-files/add-master-static-ips.yml
      <% end %>
      var_files:
        addons-spec: "git-kubo-ci/specs/guestbook.yml"
      vars_files:
      - gcs-load-balancer-vars/load-balancer-vars.yml
      - kubo-lock/metadata
      <% if env =~ /^vsphere/ %>
      - director_uuid/var.yml
      <% end %>
      releases:
      - gcs-kubo-release-tarball-untested/*.tgz
      - gcs-kubernetes-release-tarball-untested/*.tgz
      source_file: source-json/source.json
      vars:
        deployment_name: ci-service
        worker_count: 3
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  - task: update-kubeconfig
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/update-kubeconfig.yml
  - put: run-apply-addons-errand
    params:
      name: apply-addons
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  - put: run-smoke-tests-errand
    params:
      name: smoke-tests
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  <% if env =~ /^vsphere-proxy/ %>
  - put: tinyproxy-deployment
    tags: ['<%= env %>']
    params:
      manifest: git-kubo-ci/manifests/tinyproxy/manifest.yml
      source_file: source-json/source.json
      vars_files:
      - kubo-lock/metadata
    on_failure: *on_failure_alert
  <% end %>
  - put: gcs-kubeconfig
    params:
      file: kubeconfig/config

- name: run-k8s-integration-tests-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: kubo-version
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: source-json
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubeconfig
      passed: [ 'deploy-k8s-<%= env %>' ]
  - task: integration-tests
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/run-k8s-integration-tests.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert
    params:
      DEPLOYMENT_NAME: ci-service
      ENABLE_PERSISTENT_VOLUME_TESTS: true
      <% if !(multi_az_envs.include?(env)) %>
      ENABLE_MULTI_AZ_TESTS: false
      <% end %>
      <% if env =~ /^(vsphere|openstack)/ %>
      ENABLE_K8S_LBS_TESTS: false
      <% end %>

<% if conformance_test_envs.include?(env) %>
- name: run-k8s-conformance-tests-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: source-json
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: kubo-version
      passed: [ 'deploy-k8s-<%= env %>' ]
    - get: gcs-kubeconfig
      passed: [ 'deploy-k8s-<%= env %>' ]
  - task: conformance-tests
    file: git-kubo-ci/tasks/run-conformance-tests.yml
    tags:
    - <%= env %>
    on_failure: *on_failure_alert
<% end %>

<%
  turbulence_passed_reqs = ["run-k8s-integration-tests-#{env}"]
  if conformance_test_envs.include? env
    turbulence_passed_reqs << "run-k8s-conformance-tests-#{env}"
  end
%>

- name: run-k8s-turbulence-tests-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: <%= turbulence_passed_reqs %>
    - get: gcs-bosh-state
      passed: <%= turbulence_passed_reqs %>
    - get: gcs-bosh-creds
      passed: <%= turbulence_passed_reqs %>
    - get: gcs-kubo-release-tarball-untested
      passed: <%= turbulence_passed_reqs %>
    - get: source-json
      passed: <%= turbulence_passed_reqs %>
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= turbulence_passed_reqs %>
    - get: git-kubo-deployment
      passed: <%= turbulence_passed_reqs %>
    - get: git-kubo-release
      passed: <%= turbulence_passed_reqs %>
    - get: kubo-version
      passed: <%= turbulence_passed_reqs %>
    - get: gcs-kubeconfig
      passed: <%= turbulence_passed_reqs %>
  - task: turbulence-tests
    file: git-kubo-ci/tasks/run-k8s-turbulence-tests.yml
    tags: ['<%= env %>']
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert
    params:
      IAAS: <%= env.split('-')[0] %>
      ENABLE_TURBULENCE_WORKER_DRAIN_TESTS: true
      ENABLE_TURBULENCE_WORKER_FAILURE_TESTS: true
      ENABLE_TURBULENCE_MASTER_FAILURE_TESTS: true
      <% if !(multi_az_envs.include?(env)) %>
      ENABLE_MULTI_AZ_TESTS: false
      <% end %>
      <% if env != "openstack" %>
      ENABLE_TURBULENCE_PERSISTENCE_FAILURE_TESTS: true
      <% end %>

<%
  destroy_k8s_passed_reqs = ["run-k8s-turbulence-tests-#{env}"]
%>

- name: destroy-k8s-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: <%= destroy_k8s_passed_reqs %>
    - get: kubo-version
      passed: <%= destroy_k8s_passed_reqs %>
    - get: git-kubo-deployment
      passed: <%= destroy_k8s_passed_reqs %>
    - get: git-kubo-release
      passed: <%= destroy_k8s_passed_reqs %>
    - get: gcs-bosh-state
      passed: <%= destroy_k8s_passed_reqs %>
    - get: gcs-bosh-creds
      passed: <%= destroy_k8s_passed_reqs %>
    - get: gcs-kubo-release-tarball-untested
      passed: <%= destroy_k8s_passed_reqs %>
    - get: source-json
      passed: <%= destroy_k8s_passed_reqs %>
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= destroy_k8s_passed_reqs %>
  - task: destroy-k8s
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert
  <% if env =~ /^vsphere-proxy/ %>
  - task: destroy-tinyproxy
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-tinyproxy.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert
  <% end %>

<%
destroy_bosh_passed_reqs = [ "destroy-k8s-#{env}" ]
%>

- name: destroy-bosh-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-bosh-deployment
    - get: git-kubo-deployment
      passed: <%= destroy_bosh_passed_reqs %>
    - get: git-kubo-release
      passed: <%= destroy_bosh_passed_reqs %>
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: <%= destroy_bosh_passed_reqs %>
    - get: kubo-version
      passed: <%= destroy_bosh_passed_reqs %>
    - get: gcs-bosh-state
      passed: <%= destroy_bosh_passed_reqs %>
    - get: gcs-bosh-creds
      passed: <%= destroy_bosh_passed_reqs %>
    - get: gcs-kubo-release-tarball-untested
      passed: <%= destroy_bosh_passed_reqs %>
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= destroy_bosh_passed_reqs %>
  - task: destroy
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert
  - put: kubo-lock-<%= env %>
    params: { release: kubo-lock-<%= env %> }
<% end %>

<% upgrade_test_envs.each do |env| %>
- name: claim-lock-upgrade-<%= env %>
  max_in_flight: 1
  plan:
  - aggregate:
    - get: kubo-version
      trigger: true
    - get: git-kubo-release
    - get: git-kubo-deployment
    - get: gcs-kubo-release-tarball-untested
    - get: gcs-kubo-deployment-tarball-untested
  - put: kubo-lock
    resource: kubo-lock-<%= env %>
    params: { acquire: true }

- name: install-bosh-for-upgrade-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-bosh-deployment
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'claim-lock-upgrade-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'claim-lock-upgrade-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'claim-lock-upgrade-<%= env %>' ]
    - get: kubo-version
      passed: [ 'claim-lock-upgrade-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-upgrade-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'claim-lock-upgrade-<%= env %>' ]
  - task: install
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    params:
      <% if env.include? 'openstack' %>
      CLOUD_CONFIG_OPS_FILE: openstack-k8s-cloud-config.yml
      <% elsif env =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= env %>-k8s-cloud-config-multiaz.yml
      <% elsif env.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>
  - aggregate:
    - put: gcs-bosh-creds
      attempts: 10
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      attempts: 10
      params:
        file: bosh-state/state.json
  - task: generate-load-balancer-vars
    file: git-kubo-ci/tasks/generate-load-balancer-vars.yml
  - task: generate-source-json
    file: git-kubo-ci/tasks/generate-source-json.yml
  - aggregate:
    - put: gcs-load-balancer-vars
      attempts: 10
      params:
        file: load-balancer-vars/vars.yml
    - put: source-json
      attempts: 10
      params:
        file: source-json/source.json
  - task: update-cloud-config-with-vm-ext
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/update-cloud-config-with-vm-ext.yml

- name: deploy-old-k8s-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: old-kubo-deployment-tarball
    - get: old-kubo-release-tarball
      params:
        globs:
        - "kubo-release*"
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'install-bosh-for-upgrade-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'install-bosh-for-upgrade-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'install-bosh-for-upgrade-<%= env %>' ]
    - get: kubo-version
      passed: [ 'install-bosh-for-upgrade-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh-for-upgrade-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh-for-upgrade-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'install-bosh-for-upgrade-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'install-bosh-for-upgrade-<%= env %>' ]
    - get: source-json
      passed: [ 'install-bosh-for-upgrade-<%= env %>' ]
    - get: gcs-load-balancer-vars
      passed: [ 'install-bosh-for-upgrade-<%= env %>' ]
  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= env %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    output_mapping:
      unpacked_dir: unpacked-old-kubo-deployment
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment-*
  - task: upload-old-stemcell
    tags: ['<%= env %>']
    input_mapping:
      git-kubo-deployment: unpacked-old-kubo-deployment
    file: git-kubo-ci/tasks/upload-stemcell.yml
    params:
      IAAS: <%= env.split('-')[0] %>
  <% if env =~ /^vsphere/ %>
  - task: get_director_uuid
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/get_director_uuid.yml
  <% end %>
  <% if env =~ /^vsphere-proxy/ %>
  - task: update-cloud-config-for-master-static-ips
    file: git-kubo-ci/tasks/update-cloud-config.yml
    tags: ['<%= env %>']
    params:
      OPS: -o git-kubo-ci/manifests/ops-files/add-master-static-ips-cloud-config.yml --vars-file=kubo-lock/metadata
  - task: update-cloud-config-for-proxy-ip
    file: git-kubo-ci/tasks/update-cloud-config.yml
    tags: ['<%= env %>']
    params:
      OPS: -o git-kubo-ci/manifests/ops-files/vsphere-proxy-cloud-config.yml --vars-file=kubo-lock/metadata
  <% end %>
  - put: cfcr-deployment
    params:
      manifest: unpacked-old-kubo-deployment/manifests/cfcr.yml
      cleanup: true
      no_redact: true
      ops_files:
      - git-kubo-ci/manifests/ops-files/add-api-server-endpoint.yml
      - unpacked-old-kubo-deployment/manifests/ops-files/vm-types.yml
      - unpacked-old-kubo-deployment/manifests/ops-files/rename.yml
      - unpacked-old-kubo-deployment/manifests/ops-files/use-persistent-disk-for-workers.yml
      <% if env =~ /^gcp/ %>
      - unpacked-old-kubo-deployment/manifests/ops-files/iaas/gcp/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/use-vm-extensions.yml
      <% end %>
      <% if env =~ /^aws/ %>
      - unpacked-old-kubo-deployment/manifests/ops-files/iaas/aws/cloud-provider.yml
      - unpacked-old-kubo-deployment/manifests/ops-files/iaas/aws/lb.yml
      - git-kubo-deployment/manifests/ops-files/use-vm-extensions.yml
      <% end %>
      <% if env =~ /^openstack/ %>
      - unpacked-old-kubo-deployment/manifests/ops-files/iaas/openstack/cloud-provider.yml
      <% end %>
      <% if env =~ /^vsphere/ %>
      - unpacked-old-kubo-deployment/manifests/ops-files/iaas/vsphere/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/iaas/vsphere/use-vm-extensions.yml
      <% end %>
      - unpacked-old-kubo-deployment/manifests/ops-files/misc/single-master.yml
      - git-kubo-ci/manifests/ops-files/scale-to-one-az.yml
      <% if env =~ /^vsphere-proxy/ %>
      - unpacked-old-kubo-deployment/manifests/ops-files/add-proxy.yml
      - git-kubo-ci/manifests/ops-files/add-master-static-ips.yml
      <% end %>
      var_files:
        addons-spec: "git-kubo-ci/specs/guestbook.yml"
      vars_files:
      - gcs-load-balancer-vars/load-balancer-vars.yml
      - kubo-lock/metadata
      <% if env =~ /^vsphere/ %>
      - director_uuid/var.yml
      <% end %>
      releases:
      - old-kubo-release-tarball/*.tgz
      source_file: source-json/source.json
      vars:
        deployment_name: ci-service
        master_vm_type: master
        worker_vm_type: worker
        apply_addons_vm_type: minimal
        disk_size: 10120
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  - task: update-kubeconfig
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/update-kubeconfig.yml
  - put: run-apply-addons-errand
    params:
      name: apply-addons
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  - put: run-smoke-tests-errand
    params:
      name: smoke-tests
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  - put: gcs-kubeconfig
    params:
      file: kubeconfig/config

- name: upgrade-kubo-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: gcs-kubernetes-release-tarball-untested
    - get: kubo-version
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: gcs-kubeconfig
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: gcs-load-balancer-vars
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: source-json
      passed: [ 'deploy-old-k8s-<%= env %>' ]
    - get: slackers
    tags: ['<%= env %>']
  - task: get_director_uuid
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/get_director_uuid.yml
  - task: upload-stemcell
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/upload-stemcell.yml
    params:
      IAAS: <%= env.split('-')[0] %>
  - task: create-bosh-upgrade-deployment
    params:
      IAAS: <%= env %>
      ENABLE_MULTI_AZ_TESTS: false
    file: git-kubo-ci/tasks/create-bosh-deploy-command.yml
  - task: upgrade
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/run-k8s-upgrade-tests.yml
    input_mapping:
      gcs-kubo-release-tarball: gcs-kubo-release-tarball-untested
      gcs-kubernetes-release-tarball: gcs-kubernetes-release-tarball-untested
    params:
      ENABLE_MULTI_AZ_TESTS: false
      DEPLOYMENT_NAME: ci-service
      IAAS: <%= env.split('-')[0] %>
      <% if env =~ /^vsphere-proxy/ %>
      INTERNET_ACCESS: false
      <% end %>
    on_failure: *on_failure_alert
  - put: run-apply-addons-errand
    params:
      name: apply-addons
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  - put: run-smoke-tests-errand
    params:
      name: smoke-tests
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_alert

- name: destroy-k8s-upgrade-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'upgrade-kubo-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'upgrade-kubo-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'upgrade-kubo-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'upgrade-kubo-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'upgrade-kubo-<%= env %>' ]
    - get: kubo-version
      passed: [ 'upgrade-kubo-<%= env %>' ]
    - get: source-json
      passed: [ 'upgrade-kubo-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'upgrade-kubo-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'upgrade-kubo-<%= env %>' ]
  - task: destroy-k8s
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml

- name: destroy-bosh-upgrade-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-bosh-deployment
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'destroy-k8s-upgrade-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'destroy-k8s-upgrade-<%= env %>' ]
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'destroy-k8s-upgrade-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-upgrade-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-upgrade-<%= env %>' ]
    - get: kubo-version
      passed: [ 'destroy-k8s-upgrade-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'destroy-k8s-upgrade-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s-upgrade-<%= env %>' ]
  - task: destroy
    tags: [ '<%= env %>' ]
    file: git-kubo-ci/tasks/destroy-bosh.yml
  - put: kubo-lock-<%= env %>
    params:
      release: kubo-lock
<% end %>

<% multi_master_upgrade_test_envs.each do |env| %>
- name: claim-lock-upgrade-multi-master-<%= env %>
  max_in_flight: 1
  plan:
  - aggregate:
    - get: kubo-version
      trigger: true
    - get: git-kubo-release
    - get: git-kubo-deployment
    - get: gcs-kubo-release-tarball-untested
    - get: gcs-kubo-deployment-tarball-untested
  - put: kubo-lock-<%= env %>
    params: { acquire: true }

- name: install-bosh-multi-master-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-bosh-deployment
    - get: git-kubo-ci-new
      resource: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'claim-lock-upgrade-multi-master-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'claim-lock-upgrade-multi-master-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'claim-lock-upgrade-multi-master-<%= env %>' ]
    - get: kubo-version
      passed: [ 'claim-lock-upgrade-multi-master-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-upgrade-multi-master-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'claim-lock-upgrade-multi-master-<%= env %>' ]
  - task: install
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    params:
      <% if env =~ /^(gcp|vsphere-lb)/ %>
      CLOUD_CONFIG_OPS_FILE: <%= env %>-k8s-cloud-config-multiaz.yml
      <% elsif env.include? 'aws-lb' %>
      CLOUD_CONFIG_OPS_FILE: aws-k8s-cloud-config-multiaz.yml
      <% end %>
  - aggregate:
    - put: gcs-bosh-creds
      attempts: 10
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      attempts: 10
      params:
        file: bosh-state/state.json
  - task: generate-load-balancer-vars
    file: git-kubo-ci-new/tasks/generate-load-balancer-vars.yml
  - task: generate-source-json
    file: git-kubo-ci-new/tasks/generate-source-json.yml
    input_mapping:
      git-kubo-ci: git-kubo-ci-new
  - aggregate:
    - put: gcs-load-balancer-vars
      attempts: 10
      params:
        file: load-balancer-vars/vars.yml
    - put: source-json
      attempts: 10
      params:
        file: source-json/source.json
  - task: update-cloud-config-with-vm-ext
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/update-cloud-config-with-vm-ext.yml

- name: deploy-old-k8s-multi-master-<%= env %>
  plan:
  - aggregate:
    - get: old-kubo-deployment-tarball
    - get: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'install-bosh-multi-master-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh-multi-master-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh-multi-master-<%= env %>' ]
    - get: old-kubo-release-tarball
      params:
        globs:
        - "kubo-release*"
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'install-bosh-multi-master-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'install-bosh-multi-master-<%= env %>' ]
    - get: kubo-version
      passed: [ 'install-bosh-multi-master-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'install-bosh-multi-master-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'install-bosh-multi-master-<%= env %>' ]
    - get: source-json
      passed: [ 'install-bosh-multi-master-<%= env %>' ]
    - get: gcs-load-balancer-vars
      passed: [ 'install-bosh-multi-master-<%= env %>' ]
    - get: slackers
  - task: unpack-tgz
    file: git-kubo-ci/tasks/unpack-tgz.yml
    tags: ['<%= env %>']
    input_mapping:
      source_tarball: old-kubo-deployment-tarball
    output_mapping:
      unpacked_dir: unpacked-old-kubo-deployment
    params:
      SOURCE_TARBALL_REGEX: kubo-deployment-*.tgz
      COLLAPSE_DIR: kubo-deployment-*
  - task: get_director_uuid
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/get_director_uuid.yml
  - task: upload-old-stemcell
    tags: ['<%= env %>']
    input_mapping:
      git-kubo-deployment: unpacked-old-kubo-deployment
    file: git-kubo-ci/tasks/upload-stemcell.yml
    params:
      IAAS: <%= env.split('-')[0] %>
  - put: cfcr-deployment
    params:
      manifest: unpacked-old-kubo-deployment/manifests/cfcr.yml
      cleanup: true
      no_redact: true
      ops_files:
      - git-kubo-ci/manifests/ops-files/add-api-server-endpoint.yml
      - unpacked-old-kubo-deployment/manifests/ops-files/rename.yml
      - unpacked-old-kubo-deployment/manifests/ops-files/vm-types.yml
      <% if env =~ /^gcp/ %>
      - unpacked-old-kubo-deployment/manifests/ops-files/iaas/gcp/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/use-vm-extensions.yml
      <% end %>
      <% if env =~ /^aws/ %>
      - unpacked-old-kubo-deployment/manifests/ops-files/iaas/aws/cloud-provider.yml
      - unpacked-old-kubo-deployment/manifests/ops-files/iaas/aws/lb.yml
      - git-kubo-deployment/manifests/ops-files/use-vm-extensions.yml
      <% end %>
      - git-kubo-ci/manifests/ops-files/enable-multiaz-workers.yml
      <% if env =~ /^vsphere/ %>
      - unpacked-old-kubo-deployment/manifests/ops-files/iaas/vsphere/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/iaas/vsphere/use-vm-extensions.yml
      <% end %>
      var_files:
        addons-spec: "git-kubo-ci/specs/guestbook.yml"
      vars_files:
      - gcs-load-balancer-vars/load-balancer-vars.yml
      - kubo-lock/metadata
      <% if env =~ /^vsphere/ %>
      - director_uuid/var.yml
      <% end %>
      releases:
      - old-kubo-release-tarball/*.tgz
      source_file: source-json/source.json
      vars:
        deployment_name: ci-service
        worker_vm_type: worker
        master_vm_type: master
        apply_addons_vm_type: minimal
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  - put: run-apply-addons-errand
    params:
      name: apply-addons
      keep_alive: true
      source_file: source-json/source.json
    tags: ['<%= env %>']
    on_failure: *on_failure_alert
  - put: run-smoke-tests-errand
    params:
      name: smoke-tests
      keep_alive: true
      source_file: source-json/source.json
    tags: ['<%= env %>']
    on_failure: *on_failure_alert
  - task: update-kubeconfig
    file: git-kubo-ci/tasks/update-kubeconfig.yml
    tags: ['<%= env %>']
  - put: gcs-kubeconfig
    params:
      file: kubeconfig/config
    tags: ['<%= env %>']

- name: upgrade-kubo-multi-master-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: gcs-kubernetes-release-tarball-untested
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: kubo-version
      passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: git-kubo-deployment
      # passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: gcs-kubeconfig
      passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: source-json
      passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: gcs-load-balancer-vars
      passed: [ 'deploy-old-k8s-multi-master-<%= env %>' ]
    - get: slackers
  - task: upload-old-stemcell
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/upload-stemcell.yml
    params:
      IAAS: <%= env.split('-')[0] %>
  - task: create-bosh-upgrade-deployment
    params:
      ENABLE_MULTI_AZ_TESTS: true
      IAAS: <%= env %>
    file: git-kubo-ci/tasks/create-bosh-deploy-command.yml
  - task: get_director_uuid
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/get_director_uuid.yml
  - task: upgrade
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/run-k8s-upgrade-tests.yml
    input_mapping:
      gcs-kubo-release-tarball: gcs-kubo-release-tarball-untested
      gcs-kubernetes-release-tarball: gcs-kubernetes-release-tarball-untested
    params:
      IAAS: <%= env.split('-')[0] %>
      ENABLE_MULTI_AZ_TESTS: true
      DEPLOYMENT_NAME: ci-service
    on_failure: *on_failure_alert
  - put: run-smoke-tests-errand
    params:
      name: smoke-tests
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_alert

- name: destroy-k8s-upgrade-multi-master-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'upgrade-kubo-multi-master-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'upgrade-kubo-multi-master-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'upgrade-kubo-multi-master-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'upgrade-kubo-multi-master-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'upgrade-kubo-multi-master-<%= env %>' ]
    - get: source-json
      passed: [ 'upgrade-kubo-multi-master-<%= env %>' ]
    - get: kubo-version
      passed: [ 'upgrade-kubo-multi-master-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'upgrade-kubo-multi-master-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'upgrade-kubo-multi-master-<%= env %>' ]
  - task: destroy-k8s
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml

- name: destroy-bosh-upgrade-multi-master-<%= env %>
  plan:
  - aggregate:
    - get: git-kubo-ci
    - get: git-bosh-deployment
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= env %>' ]
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= env %>' ]
    - get: kubo-version
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'destroy-k8s-upgrade-multi-master-<%= env %>' ]
  - task: destroy
    tags: [ '<%= env %>' ]
    file: git-kubo-ci/tasks/destroy-bosh.yml
  - put: kubo-lock
    resource: kubo-lock-<%= env %>
    params:
      release: kubo-lock
<% end %>

<% bbr_test_envs.each do |env| %>
- name: claim-lock-bbr-<%= env %>
  max_in_flight: 1
  plan:
  - aggregate:
    - get: kubo-version
      trigger: true
    - get: github-etcd-release
      trigger: true
    - get: git-kubo-drats
    - get: git-kubo-release
    - get: git-kubo-deployment
    - get: gcs-kubo-release-tarball-untested
    - get: gcs-kubo-deployment-tarball-untested
  - put: kubo-lock-<%= env %>
    params: { acquire: true }

- name: install-bosh-bbr-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
    - get: git-bosh-deployment
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'claim-lock-bbr-<%= env %>' ]
    - get: github-etcd-release
      passed: [ 'claim-lock-bbr-<%= env %>' ]
    - get: git-kubo-drats
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'claim-lock-bbr-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'claim-lock-bbr-<%= env %>' ]
    - get: kubo-version
      passed: [ 'claim-lock-bbr-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'claim-lock-bbr-<%= env %>' ]
  - task: install
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/install-bosh.yml
    params:
      CLOUD_CONFIG_OPS_FILE: <%= env %>-k8s-cloud-config-multiaz.yml
    on_failure: *on_failure_alert
  - aggregate:
    - put: gcs-bosh-creds
      attempts: 10
      params:
        file: bosh-creds/creds.yml
    - put: gcs-bosh-state
      attempts: 10
      params:
        file: bosh-state/state.json
  - task: generate-load-balancer-vars
    file: git-kubo-ci/tasks/generate-load-balancer-vars.yml
  - task: generate-source-json
    file: git-kubo-ci/tasks/generate-source-json.yml
  - aggregate:
    - put: gcs-load-balancer-vars
      attempts: 10
      params:
        file: load-balancer-vars/vars.yml
    - put: source-json
      attempts: 10
      params:
        file: source-json/source.json
  - task: update-cloud-config-with-vm-ext
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/update-cloud-config-with-vm-ext.yml

- name: deploy-k8s-bbr-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock
      resource: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'install-bosh-bbr-<%= env %>' ]
    - get: github-etcd-release
      passed: [ 'install-bosh-bbr-<%= env %>' ]
    - get: git-kubo-drats
    - get: git-kubo-deployment
      passed: [ 'install-bosh-bbr-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'install-bosh-bbr-<%= env %>' ]
    - get: kubo-version
      passed: [ 'install-bosh-bbr-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'install-bosh-bbr-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'install-bosh-bbr-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'install-bosh-bbr-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'install-bosh-bbr-<%= env %>' ]
    - get: source-json
      passed: [ 'install-bosh-bbr-<%= env %>' ]
    - get: gcs-load-balancer-vars
      passed: [ 'install-bosh-bbr-<%= env %>' ]
  - task: get_director_uuid
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/get_director_uuid.yml
  - task: upload-stemcell
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/upload-stemcell.yml
    params:
      IAAS: <%= env.split('-')[0] %>
  - put: cfcr-deployment
    params:
      manifest: git-kubo-deployment/manifests/cfcr.yml
      cleanup: true
      no_redact: true
      ops_files:
      - git-kubo-ci/manifests/ops-files/kubo-latest-version.yml
      - git-kubo-ci/manifests/ops-files/kubernetes-latest-version.yml
      - git-kubo-deployment/manifests/ops-files/misc/bootstrap.yml
      - git-kubo-deployment/manifests/ops-files/allow-privileged-containers.yml
      - git-kubo-deployment/manifests/ops-files/addons-spec.yml
      - git-kubo-deployment/manifests/ops-files/enable-bbr.yml
      - git-kubo-deployment/manifests/ops-files/enable-nfs.yml
      - git-kubo-ci/manifests/ops-files/add-hpa-properties.yml
      - git-kubo-ci/manifests/ops-files/increase-logging-level.yml
      - git-kubo-deployment/manifests/ops-files/iaas/vsphere/cloud-provider.yml
      - git-kubo-deployment/manifests/ops-files/iaas/vsphere/use-vm-extensions.yml
      var_files:
        addons-spec: "git-kubo-ci/specs/guestbook.yml"
      vars_files:
      - gcs-load-balancer-vars/load-balancer-vars.yml
      - kubo-lock/metadata
      - director_uuid/var.yml
      releases:
      - gcs-kubo-release-tarball-untested/*.tgz
      - github-etcd-release/*.tgz
      - gcs-kubernetes-release-tarball-untested/*.tgz
      source_file: source-json/source.json
      vars:
        deployment_name: ci-service
        worker_count: 3
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  - task: update-kubeconfig
    tags: ['<%= env %>']
    file: git-kubo-ci/tasks/update-kubeconfig.yml
  - put: run-apply-addons-errand
    params:
      name: apply-addons
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  - put: run-smoke-tests-errand
    params:
      name: smoke-tests
      keep_alive: true
      source_file: source-json/source.json
    tags: [<%= env %>]
    on_failure: *on_failure_alert
  - aggregate:
    - put: gcs-kubeconfig
      params:
        file: kubeconfig/config

- name: run-k8s-bbr-tests-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: [ 'deploy-k8s-bbr-<%= env %>' ]
    - get: git-kubo-drats
    - get: source-json
      passed: [ 'deploy-k8s-bbr-<%= env %>' ]
    - get: gcs-kubeconfig
      passed: [ 'deploy-k8s-bbr-<%= env %>' ]
    - get: git-kubo-deployment
      passed: [ 'deploy-k8s-bbr-<%= env %>' ]
    - get: gcs-bosh-state
      passed: [ 'deploy-k8s-bbr-<%= env %>' ]
    - get: gcs-bosh-creds
      passed: [ 'deploy-k8s-bbr-<%= env %>' ]
    - get: kubo-version
      passed: [ 'deploy-k8s-bbr-<%= env %>' ]
    - get: git-kubo-release
      passed: [ 'deploy-k8s-bbr-<%= env %>' ]
    - get: gcs-kubo-release-tarball-untested
      passed: [ 'deploy-k8s-bbr-<%= env %>' ]
    - get: gcs-kubo-deployment-tarball-untested
      passed: [ 'deploy-k8s-bbr-<%= env %>' ]
    - get: bbr-cli
  - task: kubo-drats-tests
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/run-kubo-drats-tests.yml
    on_failure: *on_failure_alert
    params:
      DEPLOYMENT_NAME: ci-service

<%
  destroy_k8s_bbr_passed_reqs = ["run-k8s-bbr-tests-#{env}"]
%>

- name: destroy-k8s-bbr-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: <%= destroy_k8s_bbr_passed_reqs %>
    - get: kubo-version
      passed: <%= destroy_k8s_bbr_passed_reqs %>
    - get: git-kubo-deployment
      passed: <%= destroy_k8s_bbr_passed_reqs %>
    - get: git-kubo-release
      passed: <%= destroy_k8s_bbr_passed_reqs %>
    - get: gcs-bosh-state
      passed: <%= destroy_k8s_bbr_passed_reqs %>
    - get: gcs-bosh-creds
      passed: <%= destroy_k8s_bbr_passed_reqs %>
    - get: source-json
      passed: <%= destroy_k8s_bbr_passed_reqs %>
    - get: gcs-kubo-release-tarball-untested
      passed: <%= destroy_k8s_bbr_passed_reqs %>
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= destroy_k8s_bbr_passed_reqs %>
  - task: destroy-k8s
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-k8s-instance.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert

<%
destroy_bosh_bbr_passed_reqs = [ "destroy-k8s-bbr-#{env}" ]
%>

- name: destroy-bosh-bbr-<%= env %>
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-bosh-deployment
    - get: git-kubo-deployment
      passed: <%= destroy_bosh_bbr_passed_reqs %>
    - get: git-kubo-release
      passed: <%= destroy_bosh_bbr_passed_reqs %>
    - get: kubo-lock-<%= env %>
      version: every
      trigger: true
      passed: <%= destroy_bosh_bbr_passed_reqs %>
    - get: kubo-version
      passed: <%= destroy_bosh_bbr_passed_reqs %>
    - get: gcs-bosh-state
      passed: <%= destroy_bosh_bbr_passed_reqs %>
    - get: gcs-bosh-creds
      passed: <%= destroy_bosh_bbr_passed_reqs %>
    - get: gcs-kubo-release-tarball-untested
      passed: <%= destroy_bosh_bbr_passed_reqs %>
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= destroy_bosh_bbr_passed_reqs %>
  - task: destroy
    tags: [<%= env %>]
    file: git-kubo-ci/tasks/destroy-bosh.yml
    input_mapping: {kubo-lock: kubo-lock-<%= env %>}
    on_failure: *on_failure_alert
  - put: kubo-lock-<%= env %>
    params: { release: kubo-lock-<%= env %> }
<% end %>

<%
  passed_requirements = env_list.map {|env| "destroy-bosh-#{env}" unless env == 'openstack'}.compact
  passed_requirements += upgrade_test_envs.map {|env| "destroy-bosh-upgrade-#{env}" unless env == 'openstack'}.compact
  passed_requirements += bbr_test_envs.map {|env| "destroy-bosh-bbr-#{env}"}.compact
  passed_requirements += multi_master_upgrade_test_envs.map {|env| "destroy-bosh-upgrade-multi-master-#{env}" }.compact
%>

- name: upload-kubo-deployment
  plan:
  - aggregate:
    - get: slackers
    - get: git-kubo-ci
    - get: git-kubo-deployment
      passed: <%= passed_requirements %>
    - get: kubo-version
      passed: <%= passed_requirements %>
      trigger: true
    - get: gcs-kubo-deployment-tarball-untested
      passed: <%= passed_requirements %>
  - aggregate:
    - put: gcs-kubo-deployment-tarball
      params:
        file: gcs-kubo-deployment-tarball-untested/kubo-deployment-*.tgz
    - put: gcs-kubo-deployments
      params:
        file: gcs-kubo-deployment-tarball-untested/kubo-deployment-*.tgz

- name: upload-kubo-release
  plan:
  - aggregate:
    - get: gcs-kubo-release-tarball-untested
      passed: <%= passed_requirements %>
    - get: kubo-version
      passed: <%= passed_requirements %>
      trigger: true
  - aggregate:
    - put: gcs-kubo-release-tarball
      params:
        file: gcs-kubo-release-tarball-untested/kubo-*.tgz
    - put: gcs-kubo-releases
      params:
        file: gcs-kubo-release-tarball-untested/kubo-*.tgz

